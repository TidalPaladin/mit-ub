# Config for training a basic ViT using MJEPA on CIFAR-10.
# NOTE: Set environment variable TORCH_COMPILE=0 to disable torch.compile. This is helpful for debugging
# since compilation takes time. However, it does yield a substantial throughput improvement.
fit:
  # Leverage tensor cores for matmul
  float32_matmul_precision: medium

  trainer:
    # Train on GPU 1 in BF16 mixed precision for 50k steps, validating every 10 epochs.
    # Sanity validation steps are recommended to trigger torch.compile of the model in inference mode.
    accelerator: gpu
    devices: [1]
    precision: "bf16-mixed"
    max_steps: 50000
    num_sanity_val_steps: 2
    check_val_every_n_epoch: 10

    default_root_dir: /mnt/flash/mit-ub

    callbacks:
      # Save the best model based on validation loss and most recent model
      - class_path: pytorch_lightning.callbacks.ModelCheckpoint
        init_args:
          filename: "epoch={epoch}-step={step}-loss={val/loss:.4f}"
          monitor: "val/loss"
          auto_insert_metric_name: false
          mode: min
          save_last: true

      # Log learning rate and momentum
      - class_path: pytorch_lightning.callbacks.LearningRateMonitor
        init_args:
          log_momentum: true

    logger: 
      class_path: pytorch_lightning.loggers.wandb.WandbLogger
      init_args:
        save_dir: ${fit.trainer.default_root_dir}
        project: mit-ub

  model:
    # Use the MJEPA task with a linear probe
    class_path: mit_ub.tasks.ClassificationTask
    init_args:
      backbone: "convvit-cifar10"
      num_classes: 10
      checkpoint: /mnt/flash/mitub/mit-ub/9uc0cf7k/checkpoints/last.ckpt

      # Partial checkpoints are supported. In non-strict mode we ignore missing keys, unexpected keys, and
      # weights of mismatched shapes. The training pipeline reports the % of weights successfully loaded and
      # the names of unloaded layers.
      strict_checkpoint: false

      # Use AdamW optimizer with 8-bit precision, and a reciplrocal square root learning rate schedule
      optimizer_init:
        class_path: bitsandbytes.optim.AdamW8bit
        init_args:
          lr: 0.0001
          weight_decay: 0.05
          betas: [0.85, 0.999]
      lr_interval: "step"
      lr_scheduler_init:
        class_path: deep_helpers.optim.ReciprocalSquareRootLR
        init_args:
          warmup_steps: 5000
          cooldown_steps: 25000
          total_steps: ${fit.trainer.max_steps}
          timescale: 10000
          initial_lr: 0.00002
          initial_momentum: 0.95

      parameter_groups:
        - params:
            - "classification_head"
          weight_decay: 1.0

  data:
    class_path: mit_ub.data.CIFAR10DataModule
    init_args:
      root: /mnt/data/cifar10/cifar-10-batches-py
      batch_size: 128
      num_workers: 24
      pin_memory: true

      train_transforms:
        class_path: torchvision.transforms.v2.Compose
        init_args:
          transforms:
            - class_path: torchvision.transforms.v2.RandomHorizontalFlip
              init_args:
                p: 0.5

            - class_path: torchvision.transforms.v2.RandomVerticalFlip
              init_args:
                p: 0.5

            - class_path: torchvision.transforms.v2.RandomApply
              init_args:
                p: 0.25
                transforms:
                  - class_path: mit_ub.data.RandomRotation
                    init_args:
                      degrees: 45

            - class_path: torchvision.transforms.v2.ColorJitter
              init_args:
                brightness: 0.2
                contrast: 0.2
                saturation: 0.2

            - class_path: torchvision.transforms.v2.RandomGrayscale
              init_args:
                p: 0.1

            - class_path: torchvision.transforms.v2.ToImage
            
            - class_path: torchvision.transforms.v2.ToDtype
              init_args:
                scale: true
                dtype:
                  class_path: torch.float32

      val_transforms:
        class_path: torchvision.transforms.v2.Compose
        init_args:
          transforms:
            - class_path: torchvision.transforms.v2.ToImage
            
            - class_path: torchvision.transforms.v2.ToDtype
              init_args:
                scale: true
                dtype:
                  class_path: torch.float32
