[build-system]
requires = ["pdm-pep517>=1.0"]
build-backend = "pdm.pep517.api"

[project]
name = "mit-ub"
description = ""
requires-python = ">=3.11,<3.12"
authors = [
    {name = "Scott Chase Waggener", email = "tidalpaladin@protonmail.com"},
]
dependencies = [
  "torch",
  "torchvision",
  "einops",
  "registry @ git+https://github.com/TidalPaladin/callable-registry.git",
]
readme = "README.md"
license = {text = "Apache"}
dynamic = ["version"]

[project.optional-dependencies]
docs = [
    "manim>=0.18.1",
]
train = [
  "Pillow",
  "pandas",
  "pytorch-lightning>=2.4",
  "torchmetrics",
  "bitsandbytes>=0.44.1",
  "jsonargparse[signatures]",
  "deep-helpers @ git+https://github.com/TidalPaladin/deep-helpers.git",
]
[tool.autoflake]
remove-all-unused-imports = true
remove-unused-variables = true

[tool.autopep8]
max_line_length = 120
ignore = "E501,W6,E203"
in-place = true
recursive = true
aggressive = 3

[tool.black]
line-length = 120

[tool.isort]
ensure_newline_before_comments = true
force_grid_wrap = 0
include_trailing_comma = true
line_length = 119
lines_after_imports = 2
multi_line_output = 3
use_parentheses = false

[tool.pyright]
include = ["mit_ub", "tests"]
exclude = [
  "**/node_modules",
  "**/__pycache__",
  "**/.pytest_cache",
]
pythonVersion = "3.11"
pythonPlatform = "Linux"

[tool.pdm]
version = { source = "scm" }

[tool.pdm.dev-dependencies]
test = [
    "pytest",
    "pytest-mock",
    "pytest-cov",
    "pytest-env",
    "coverage",
]
quality = [
  "autoflake",
  "autopep8",
  "black",
  "flake8",
  "isort",
]

[tool.pytest.ini_options]
markers = [
  "ci_skip",
  "slow",
  "cuda",
]
filterwarnings = [
  "ignore:.*Reducing precision for BF16 inputs is slower than full precision.*:UserWarning",
  "ignore:.*Trying to infer the `batch_size` from an ambiguous collection.*:UserWarning",
  "ignore:.*The ``compute`` method of metric .* was called before the.*:UserWarning",
  "ignore:.*does not have many workers which may be a bottleneck.*:UserWarning",
  "ignore:.*GPU available but not used.*:UserWarning",
  "ignore:.*Invalid value for VR UI.*:UserWarning",
  "ignore:.*The length of the pixel data in the dataset .* indicates it contains excess padding.*:UserWarning",
  "ignore:.*samples in targets,.*"
]

[tool.pytest_env]
TRITON_DEBUG = "1"
TORCH_LOGS = "recompiles,dynamic"
TORCH_COMPILE = "0"

[tool.coverage.run]
omit = [
    "mit_ub/data/rotation.py",
    "mit_ub/model/gqa.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "@triton.jit"
]



# Sample script config
[project.scripts]
train = "deep_helpers.cli:main"
triage = "mit_ub.tasks.triage:entrypoint"
